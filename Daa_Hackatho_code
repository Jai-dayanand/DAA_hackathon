import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QListWidget, QPushButton, QLineEdit, QDialog, QCalendarWidget
from PyQt5.QtCore import Qt, QDateTime
import pandas as pd


class Task:
    def _init_(self, title, due_date, hours_until_deadline):
        self.title = title
        self.due_date = due_date
        self.estimated_time = hours_until_deadline
        self.completed = False


class TaskManager:
    def _init_(self):
        self.tasks = pd.DataFrame(columns=['Title', 'Due Date', 'Estimated Time', 'Completed'])

    def add_task(self, task):
        self.tasks = self.tasks.append({'Title': task.title,
                                        'Due Date': task.due_date,
                                        'Estimated Time': task.estimated_time,
                                        'Completed': task.completed}, ignore_index=True)

    def prioritize_tasks(self):
        self.tasks.sort_values(by=['Due Date', 'Estimated Time'], inplace=True)

    def mark_as_completed(self, task_title):
        self.tasks.loc[self.tasks['Title'] == task_title, 'Completed'] = True


class TaskManagerApp(QWidget):
    def _init_(self):
        super()._init_()

        self.task_manager = TaskManager()

        self.init_ui()

    def init_ui(self):
        # Create GUI elements
        self.title_label = QLabel("Task Manager", self)
        self.task_list = QListWidget(self)

        self.add_button = QPushButton("Add Task", self)
        self.add_button.clicked.connect(self.prompt_user_for_task)

        self.complete_button = QPushButton("Mark as Completed", self)
        self.complete_button.clicked.connect(self.mark_as_completed)

        self.prioritize_button = QPushButton("Prioritize Tasks", self)
        self.prioritize_button.clicked.connect(self.prioritize_tasks)

        # Layout
        layout = QVBoxLayout(self)
        layout.addWidget(self.title_label)
        layout.addWidget(self.task_list)
        layout.addWidget(self.add_button)
        layout.addWidget(self.complete_button)
        layout.addWidget(self.prioritize_button)

        self.load_tasks_from_excel()
        self.update_task_list()

        # Set up the main window
        self.setGeometry(100, 100, 400, 300)
        self.setWindowTitle('Task Manager')

    def prompt_user_for_task(self):
        dialog = TaskDialog(self)
        if dialog.exec_():
            task = Task(dialog.task_name, dialog.due_date, dialog.hours_until_deadline)
            self.task_manager.add_task(task)
            self.update_task_list()
            self.save_tasks_to_excel()

    def mark_as_completed(self):
        selected_item = self.task_list.currentItem()
        if selected_item:
            task_title = selected_item.text().split('-')[0].strip()
            self.task_manager.mark_as_completed(task_title)
            self.update_task_list()
            self.save_tasks_to_excel()

    def prioritize_tasks(self):
        self.task_manager.prioritize_tasks()
        self.update_task_list()

    def update_task_list(self):
        self.task_list.clear()
        for _, task in self.task_manager.tasks.iterrows():
            status = "Completed" if task['Completed'] else "Pending"
            task_info = f"{task['Title']} - Due: {task['Due Date']} | Estimated Time: {task['Estimated Time']} hours | Status: {status}"
            self.task_list.addItem(task_info)

    def save_tasks_to_excel(self):
        self.task_manager.tasks.to_excel('tasks.xlsx', index=False)

    def load_tasks_from_excel(self):
        try:
            self.task_manager.tasks = pd.read_excel('tasks.xlsx')
        except FileNotFoundError:
            pass  # File does not exist, start with an empty DataFrame


class TaskDialog(QDialog):
    def _init_(self, parent=None):
        super(TaskDialog, self)._init_(parent)

        self.setWindowTitle("Add Task")

        self.task_name_label = QLabel("Task Name:", self)
        self.task_name_edit = QLineEdit(self)

        self.due_date_label = QLabel("Due Date:", self)
        self.due_date_edit = QCalendarWidget(self)

        self.hours_until_deadline_label = QLabel("Estimated Time (hours):", self)
        self.hours_until_deadline_edit = QLineEdit(self)

        self.add_button = QPushButton("Add Task", self)
        self.add_button.clicked.connect(self.accept)

        self.cancel_button = QPushButton("Cancel", self)
        self.cancel_button.clicked.connect(self.reject)

        layout = QVBoxLayout(self)
        layout.addWidget(self.task_name_label)
        layout.addWidget(self.task_name_edit)
        layout.addWidget(self.due_date_label)
        layout.addWidget(self.due_date_edit)
        layout.addWidget(self.hours_until_deadline_label)
        layout.addWidget(self.hours_until_deadline_edit)
        layout.addWidget(self.add_button)
        layout.addWidget(self.cancel_button)

    @property
    def task_name(self):
        return self.task_name_edit.text()

    @property
    def due_date(self):
        return self.due_date_edit.selectedDate().toString(Qt.ISODate)

    @property
    def hours_until_deadline(self):
        return float(self.hours_until_deadline_edit.text())


if _name_ == '_main_':
    app = QApplication(sys.argv)
    task_manager_app = TaskManagerApp()
    task_manager_app.show()
    sys.exit(app.exec_())
